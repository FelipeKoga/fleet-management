Resources:
  # SconnectWebsocketsRoute:
  #   Type: 'AWS::ApiGatewayV2::Route'
  #   Properties:
  #     AuthorizationType: 'AWS_IAM'
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: tcc_user_pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
        - AttributeDataType: String
          Mutable: True
          Name: companyId
          StringAttributeConstraints:
            MinLength: 1
            MaxLength: 256
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: tcc_user_pool_client
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - name
        - email
        - custom:companyId
  ApiGatewayAuthorizer:
    DependsOn:
      # this is pre-defined by serverless
      - ApiGatewayRestApi
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: cognito_auth
      # apparently ApiGatewayRestApi is a global string
      RestApiId: { 'Ref': 'ApiGatewayRestApi' }
      IdentitySource: method.request.header.Authorization
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - Fn::GetAtt: [CognitoUserPool, Arn]
Outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
